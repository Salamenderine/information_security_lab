theory Visa

begin

builtins:  signing, asymmetric-encryption

functions: f/2, MAC/3, MACprime/2

/////////////////////////////////////////////////////
//                     Rules                       //
/////////////////////////////////////////////////////

// ========= Terminal-Issuer Channel ========== //
rule Terminal_Issuer_Channel:
    [ Send(Sender, Recipient, channelID, msg) ]
  -->
    [ Recv(Sender, Recipient, channelID, msg) ]

// =========== Application Transaction Counter ==========//
rule Generate_ATC:
    [ Fr(~ATC) ]-->[ !ATC(~ATC), Out(~ATC) ]

// =============== Card setup ================ //
rule Create_Card:
    [ Fr(~PAN),//card number
      Fr(~mk),//symmetric key shared with issuer
      Fr(~privkCard)//card's private key
    ]
  -->
    [ !SharedKey(~PAN, ~mk),
      //annotate the issuing bank
      !IssuedBy(~PAN, $Issuer),
      //PKI
      !LtkCard(~PAN, ~privkCard),
      !Pk(~PAN, pk(~privkCard)),
      Out(pk(~privkCard))
    ]

// ============== Compromise =============== //
rule Compromise_Card:
    [ !LtkCard(~PAN, ~privkCard) ]
  --[ Compromise(~PAN) ]->
    [ Out(<~PAN, ~privkCard>) ]

rule Compromise_Shared_Key:
    [ !IssuedBy(~PAN, $Issuer),
      !SharedKey(~PAN, ~mk) ]
  --[ Compromise($Issuer),
      Compromise(~PAN) ]->
    [ Out(~mk) ]

// =========== Get Processing Options ============ //
rule Terminal_Sends_GPO:
    let PDOL = <$amount, ~un>
    in
    [ Fr(~un) ]
  -->
    [ Out(<'GET_PROCESSING_OPTIONS', PDOL>),
      Terminal_Sent_GPO($Terminal, PDOL) ]

rule Card_Responds_To_GPO:
    let sK = f(~mk, ATC)
        AC = MAC(sK, PDOL, ATC) in
    [ In(<'GET_PROCESSING_OPTIONS', PDOL>),
      !IssuedBy(~PAN, $Issuer),
      !ATC(ATC),
      //Things to do Here
      !SharedKey(~PAN, ~mk),
      Fr(~nc)
    ]
  --[ Once(<~PAN, ATC, 'Card'>) //used in the restriction 'once'
    ]->
    [
      //Things wo do Here as well
      Out(<'fDDA', 'TC', ATC, AC>),
      Out(<'fDDA', 'ARQC', ATC, AC>),
      // Store more attributes
      Card_Responded_To_GPO(~PAN, $Issuer, PDOL, ~nc, ATC, AC)
    ] 


// ============== Read Records ==================== //
rule Terminal_Sends_RR:
    [Terminal_Sent_GPO($Terminal, PDOL), 
      In(<'fDDA', CID, ATC, AC>)]
  -->
    [Terminal_Sent_RR($Terminal, PDOL, 'fDDA', CID, ATC, AC), 
    Out('READ_RECORD')]

rule Card_Responds_To_RR:
    let sm = <snd(PDOL), fst(PDOL), ~nc, ATC, 'fDDA'>
        transaction = <~PAN, PDOL, ATC, AC>
        SDAD = sign(sm, ~privkCard) in
    [In('READ_RECORD'),
    Card_Responded_To_GPO(~PAN, $Issuer, PDOL, ~nc, ATC, AC), 
    !LtkCard(~PAN, ~privkCard)]
    --[Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), 
        Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>)]->
    [Out(<~PAN, SDAD, ~nc>)]


// =========== Offline Data Authentication ============ //
rule Terminal_SDAD_Verify:
    let ver_result = verify(SDAD, <snd(PDOL), fst(PDOL), nc, ATC, AIP>, pubC) in
    [In(<~PAN, SDAD, nc>),
    Terminal_Sent_RR($Terminal, PDOL, AIP, CID, ATC, AC),
    !Pk(~PAN, pubC)]
    --[Eq(ver_result, true), Once(<~PAN, ATC, 'Terminal'>)]->
    [Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, CID, ATC, AC)]

// ============== Offline Authorization ============== //

rule Terminal_Receives_TC:
    let transaction = <~PAN, PDOL, ATC, AC> in
    [ Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'TC', ATC, AC),
      !IssuedBy(~PAN, $Issuer) ]
  --[ Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
      Honest($Issuer), Honest(~PAN)]->
    [ ]


// ============== Online Authorization ============== //
rule Terminal_Receives_ARQC:
    let transaction = <~PAN, PDOL, ATC, AC> in
    [ Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC),
      !IssuedBy(~PAN, $Issuer),
      Fr(~id)]
    --[Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>)]->
    [Send($Terminal, $Issuer, <~id, '1'>, transaction), 
    Terminal_Received_ARQC($Terminal, transaction, ~PAN, ~id)]

rule Terminal_Accepts_ARQC:
    [Recv($Issuer, $Terminal, <channelID, '2'>, <'ACCEPTED', ARPC>),
    Terminal_Received_ARQC($Terminal, transaction, ~PAN, ~id)]
    --[Eq(~id, channelID), Online(), Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
      Commit($Terminal, $Issuer, <'Issuer', 'Terminal', transaction>),
      Honest($Issuer), Honest(~PAN)]->
    []

// ================== Issuer =================== //
rule Issuer_Receives_AC:
    let AC = MAC(f(~mk, ATC), PDOL, ATC)
        ARPC = MACprime(f(~mk, ATC), AC)
        transaction = <~PAN, PDOL, ATC, AC>
    in
    [ Recv($Terminal, $Issuer, <channelID, '1'>, transaction),
      !SharedKey(~PAN, ~mk),
      !IssuedBy(~PAN, $Issuer) ]
  --[ Once(<~PAN, ATC, 'Issuer'>), //used in the restriction 'once'
      Running($Issuer, $Terminal, <'Issuer', 'Terminal', transaction>)]->
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]

rule Issuer_Commits:
    let transaction = <~PAN, PDOL, ATC, AC> in
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]
  --[ Commit($Issuer, ~PAN, <'Card', 'Issuer', transaction>),
      Commit($Issuer, $Terminal, <'Terminal', 'Issuer', transaction>),
      Honest($Issuer), Honest(~PAN)]->
    [ Send($Issuer, $Terminal, <channelID, '2'>, <'ACCEPTED', ARPC>) ]


/////////////////////////////////////////////////////
//                 Restrictions                    //
/////////////////////////////////////////////////////
restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"

restriction once: //checks that ATC is different per card session
  "All a #i #j. Once(a)@i & Once(a)@j ==> #i = #j"

////////////////////////////////////////////
//              Sanity Check              //
////////////////////////////////////////////
  
lemma executable_offline:
  exists-trace
  "Ex PAN t #i #j.
    not(Online()@j) &
    //Card-Terminal agreement
    i < j &
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    not (Ex A #a. Compromise(A)@a)"

lemma executable_online:
  exists-trace
  "Ex PAN Issuer t #i #j #k #l.
    Online()@j &
    //Card-Terminal agreement
    i < j &
    // Done on card side
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    // Done when terminal accepts
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    //Card-Issuer agreement
    k < l &
    // Done on card side
    Running(PAN, Issuer, <'Card', 'Issuer', t>)@k &
    // Done on issuer side
    Commit(Issuer, PAN, <'Card', 'Issuer', t>)@l &
    not (Ex A #a. Compromise(A)@a)"


/////////////////////////////////////////////////////
//           Security Properties                   //
/////////////////////////////////////////////////////
lemma auth_to_terminal_offline:
      "
      All PAN t #i. Commit('Terminal', PAN, <'Card', 'Terminal', t>)@i & not(Online()@i) 
      ==> (Ex #j. Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@j ) |
      (Ex X #r. Compromise(X)@r & Honest(X)@i)
      "

lemma auth_to_terminal_online:
"
All PAN t Terminal Issuer #i.
Online()@i & Commit('Terminal', PAN, <'Card', 'Terminal', t>)@i 
& Commit(Terminal, Issuer, <'Issuer', 'Terminal', t>)@i
==>
(Ex #j #k. 
Running(PAN, Issuer, <'Card', 'Issuer', t>) @j &
Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@j &
Running(Issuer, Terminal, <'Issuer', 'Terminal', t>)@k) |
(Ex X #r. Compromise(X)@r & Honest(X)@i)
"

lemma auth_to_issuer:
"
All Issuer PAN Terminal t #i.
Commit(Issuer, PAN, <'Card', 'Issuer', t>) @ i &
Commit(Issuer, Terminal, <'Terminal', 'Issuer', t>) @ i 
==>
(Ex #j #k. Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@j &
Running(PAN, Issuer, <'Card', 'Issuer', t>) @j &
Running(Terminal, Issuer, <'Terminal', 'Issuer', t>)@k) |
(Ex X #r. Compromise(X)@r & Honest(X)@i)
"



end

